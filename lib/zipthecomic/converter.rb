# frozen_string_literal: true

require "fileutils"
require "pathname"
require "shellwords"
require "tmpdir"
require "tty-spinner"

module Zipthecomic
  # Handles conversion from CBR to CBZ
  class Converter
    # @param source_dir [String]
    # @param dest_dir [String]
    # @param options [Hash]
    def initialize(source_dir, dest_dir, options = {})
      @source_dir = source_dir
      @dest_dir = dest_dir
      @dry_run = options[:dry_run]
      @delete = options[:delete]
      @replace = options[:replace]
      @force_replace = options[:force_replace]
      @flatten_strategy = options[:flatten]
      @logger = Zipthecomic.setup_logger(File.expand_path("../../log/zipthecomic.log", __dir__))
      check_dependencies
    end

    # Execute conversion process
    def run
      files = Dir.glob(File.join(@source_dir, "**/*.cbr"))
      total = files.size
      converted, skipped, failed = 0, 0, 0

      files.each_with_index do |cbr_file, index|
        relative_path = Pathname.new(cbr_file).relative_path_from(Pathname.new(@source_dir))
        dest_path = File.join(@dest_dir, relative_path.dirname)
        FileUtils.mkdir_p(dest_path)

        spinner = TTY::Spinner.new("[:spinner] #{index + 1}/#{total} Converting #{File.basename(cbr_file)}", format: :dots)
        spinner.auto_spin

        if @dry_run
          @logger.info("Dry-run: would convert #{cbr_file}")
          converted += 1
          spinner.success("(dry-run)")
          next
        end

        if perform_conversion(cbr_file, dest_path)
          converted += 1
          spinner.success("(done)")
        else
          failed += 1
          spinner.error("(failed)")
        end
      end

      show_summary(converted, skipped, failed)
      flatten_output if @flatten_strategy
      prompt_delete if converted.positive? && !@dry_run && (@delete || @replace || @force_replace)
    end

    private

    # Ensure unrar is installed
    def check_dependencies
      return if system("which unrar > /dev/null")

      puts "[ERROR] 'unrar' not found. Install with:\n  brew install unrar"
      exit 1
    end

    # Convert single file
    #
    # @param source [String]
    # @param dest_path [String]
    # @return [Boolean]
    def perform_conversion(source, dest_path)
      base_name = File.basename(source, ".cbr")
      cbz_file = File.join(dest_path, "#{base_name}.cbz")

      Dir.mktmpdir do |tmpdir|
        return false unless system("unrar x -idq #{Shellwords.escape(source)} #{Shellwords.escape(tmpdir)}")

        File.write(File.join(tmpdir, "ComicInfo.xml"), <<~XML)
          <?xml version="1.0"?>
          <ComicInfo>
            <Title>#{base_name}</Title>
            <Summary>Generated by Zipthecomic</Summary>
          </ComicInfo>
        XML

        system("cd #{Shellwords.escape(tmpdir)} && zip -r -q #{Shellwords.escape(cbz_file)} .")
        true
      end
    rescue => e
      @logger.error("Error converting #{source}: #{e.message}")
      false
    end

    # Move all .cbz files into the root of @dest_dir, handling name collisions
    def flatten_output
      @logger.info("Flattening output with strategy: #{@flatten_strategy}")

      flat_dir = @dest_dir
      files = Dir.glob(File.join(@dest_dir, "**", "*.cbz"))

      files.each do |file|
        filename = File.basename(file)
        dest_file = File.join(flat_dir, filename)

        if file == dest_file
          next # already in the right place
        end

        if File.exist?(dest_file)
          case @flatten_strategy
          when "overwrite"
            FileUtils.mv(file, dest_file, force: true)
            @logger.warn("Overwrote existing: #{dest_file}")

          when "rename"
            base = File.basename(filename, ".cbz")
            ext = ".cbz"
            count = 1
            new_name = "#{base} (#{count})#{ext}"
            new_path = File.join(flat_dir, new_name)

            while File.exist?(new_path)
              count += 1
              new_name = "#{base} (#{count})#{ext}"
              new_path = File.join(flat_dir, new_name)
            end

            FileUtils.mv(file, new_path)
            @logger.info("Renamed to avoid collision: #{new_path}")

          when "skip"
            @logger.warn("Skipped due to name conflict: #{filename}")
            next

          else
            @logger.error("Unknown flatten strategy: #{@flatten_strategy}")
            next
          end
        else
          FileUtils.mv(file, dest_file)
        end
      end
    end

    # Summary after conversions
    def show_summary(converted, skipped, failed)
      summary = <<~MSG

        Conversion Complete:
          Converted: #{converted}
          Skipped:   #{skipped}
          Failed:    #{failed}

      MSG
      @logger.info(summary)
    end

    # Prompt user to delete originals
    def prompt_delete
      if @force_replace
        move_and_delete_files
        return
      end

      if @replace
        print "Replace original .cbr files with newly created .cbz files? [y/N]: "
        response = $stdin.gets.chomp.downcase
        move_and_delete_files if response == "y"
        return
      end

      print "Delete original .cbr files and move .cbz files to source folder? [y/N]: "
      response = $stdin.gets.chomp.downcase
      move_and_delete_files if response == "y"
    end

    # Move converted .cbz files back to original locations and delete .cbr files
    #
    # @return [void]
    def move_and_delete_files
      @logger.info("Relocating converted files and deleting originals...")

      moved = 0
      skipped = 0
      missing_cbz = 0
      deleted = 0

      Dir.glob(File.join(@source_dir, "**/*.cbr")).each do |cbr_file|
        base_name = File.basename(cbr_file, ".cbr")
        relative_path = Pathname.new(cbr_file).relative_path_from(Pathname.new(@source_dir))
        original_dir = File.dirname(cbr_file)

        cbz_file = File.join(@dest_dir, relative_path.dirname, "#{base_name}.cbz")
        new_cbz_path = File.join(original_dir, "#{base_name}.cbz")

        if File.exist?(cbz_file)
          if cbz_file == new_cbz_path
            @logger.info("No move needed (already in place): #{cbz_file}")
            skipped += 1
          else
            begin
              FileUtils.mv(cbz_file, new_cbz_path)
              @logger.info("Moved: #{cbz_file} → #{new_cbz_path}")
              moved += 1
            rescue ArgumentError => e
              @logger.warn("Could not move file (same file?): #{cbz_file} → #{new_cbz_path} (#{e.message})")
              skipped += 1
            end
          end
        else
          @logger.warn("Expected .cbz not found for: #{cbr_file}")
          missing_cbz += 1
        end

        if File.exist?(cbr_file)
          File.delete(cbr_file)
          @logger.info("Deleted: #{cbr_file}")
          deleted += 1
        end
      end

      puts "\nReplace Summary:"
      puts "  Moved:        #{moved}"
      puts "  Skipped:      #{skipped} (already in place or failed move)"
      puts "  Missing CBZ:  #{missing_cbz}"
      puts "  Deleted:      #{deleted} .cbr files"
      puts

      @logger.info("Replace Summary: Moved=#{moved}, Skipped=#{skipped}, Missing CBZ=#{missing_cbz}, Deleted=#{deleted}")
    end
  end
end
